#include <iostream>
#include <array>

//Передача по значению
void boo(int y)
{
	std::cout << "y= " << y << std::endl;

	y = 2009;

	std::cout << "y= " << y << std::endl;
}
//Передача по значению

//Передача по ссылке
void boolink(int &ylink)
{
	ylink = 2017;
}
//Передача по ссылке

//Передача по адресу
void booadr(int *adr)
{
	std::cout << *adr << std::endl;
	std::cout << &adr << std::endl;
	*adr = 10;
}
//Передача по адресу

//Возврат по значению
	int booint()
	{
		static int c = 10;
		int val = c * 3;
		return val;
	}
//Возврат по значению

	//Вовзрат по ссылке
	int booRetur(std::array<int, 5> &arr) 
	{
		arr[4] = 10;
		return arr[4];
	}
	//Вовзрат по ссылке

int main()
{

	//Передача по значению
	boo(1991);//Тут аргумент функции передается в параметр функции где создается переменная У . после выполнения функции перем уничтожается
	
	int x = 2021;
	boo(x);//Тут аргумент функции это переменная Х. значение переменой копируется в параметр У функции. после выполнения У уничтожается 

	boo(x-1991);//Тут значение выражения аргумента копируется в параметр функции. выполняется уничтожается

	//обычно в функцию передается КОПИЯ аргумента. если его менять в функции то это не влияет на сами исходные значения
	//Передача по значению

	//Передача по ссылке
	int xl = 2000;
	std::cout << xl << std::endl;
	boolink(xl);
	std::cout << xl << std::endl;
	//Передача по ссылке

	//Передача по адресу
	
	int a = 8;
	int *b;
	b = &a;
	std::cout << a << std::endl;
	booadr(&a);
	std::cout << a<<std::endl;
	//Передача по адресу

	//Возврат по значению
	std::cout<< booint()<<std::endl;

	//Возврат по значению

	//Возврат по ссылке
		
	std::array<int, 5> arr {1,2,3,4,5};
	std::cout << arr[4]<<'\n';
	std::cout<<booRetur(arr);
		
	//Возврат по ссылке




	return 0;
}