#include <iostream>

template <class T, int size> //Шаблон с параметром ТИПА ДАННЫХ Т и нонтипом параметром интовый сайз
class StaticArray // класса который будет пользоваться шаблонным типом данных Т и параметром интовым нонтипом
{
private:
	T a_array[size]; // Т это тип данных шаблонного вида. и САЙЗ это нонтип параметр шаблона
public:
	T* getArray(); // обьявление метода БЕЗ определения

	T& operator[](int i) //Перегрузка оператора индексирования в получаемом параметре принимает интовую переменную
	{
		return a_array[i]; // возвращаем переменную шаблоннного типа с индексом заданным через иновую переменную
	}
};

template <class T , int size>  //Определение шаблона и метода вне тела класса 
T* StaticArray<T, size>::getArray() //Указатель шаблонного типа класса статикаррай с параметром шаблона и нонтипом с прямым вызововм метода класса через ::
{
	return a_array; // возвращаем переменную шаблонного типа
}

int main()
{
	const int s = 10;
	StaticArray<int, s> Arr1;
	
	for (int i = 0; i < s; ++i)
	{
		Arr1[i] = i;
	}

	for (int ii = s-1; ii >= 0; --ii)
	{
		std::cout << Arr1[ii] << "\t";
	}




	return 0;
}

